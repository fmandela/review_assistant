swagger: "2.0"
info:
  title: "Investar API"
  version: "1.0"
  description: "API for investment management"
basePath: "/"
schemes:
  - "http"
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /api/auth/get_token:
    post:
      tags:
        - Authentication
      summary: Get a token for a registered app
      parameters:
        - in: body
          name: credentials
          description: Name of the app, public key for the app, and name of the platform where the app is running
          required: true
          schema:
            type: object
            properties:
              app_name:
                type: string
                description: Name of the app
              public_key:
                type: string
                description: Public key for the app
              platform:
                type: string
                description: Name of the platform where the app is running
      responses:
        200:
          description: Token generated successfully
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: Access token for the app
              token_type:
                type: string
                description: Type of the access token
              expires_in:
                type: integer
                description: Number of seconds until the access token expires
        400:
          description: Invalid app credentials
  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: "Register a new user"
      description: "Registers a new user in the system and returns a JWT token for authentication."
      operationId: "signup"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "User details including email, firstname, lastname, password, and optionally cds_number, id_number, and phone_number."
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
              firstname:
                type: "string"
              lastname:
                type: "string"
              password:
                type: "string"
              cds_number:
                type: "string"
              id_number:
                type: "string"
              phone_number:
                type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "The status of the response."
              message:
                type: "string"
                description: "A message describing the response."
              token:
                type: "string"
                description: "A JWT token for authenticating the user."
              user_id:
                type: "string"
                description: "The unique identifier for the user."
              name:
                type: "string"
                description: "The full name of the user."
              email:
                type: "string"
                format: "email"
                description: "The email address of the user."
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "A message describing the error."
        409:
          description: "Conflict"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "A message describing the conflict."
  /api/auth/login:
    post:
      summary: "Login a user"
      description: "Login a user with email and password"
      tags:
        - Authentication
      parameters:
        - name: "email"
          in: "body"
          description: "Email of the user to login"
          required: true
          schema:
            type: "string"
        - name: "password"
          in: "body"
          description: "Password of the user to login"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "User logged in successfully"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              message:
                type: "string"
                example: "User logged in successfully"
              token:
                type: "string"
                example: "{JWT token}"
              user_id:
                type: "string"
                example: "{user_id}"
              name:
                type: "string"
                example: "John Doe"
              email:
                type: "string"
                example: "john.doe@example.com"
        "400":
          description: "Bad Request: Missing email or password field"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Missing email field"
        "401":
          description: "Unauthorized: Invalid email or password"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Invalid email or password"
  /api/auth/{user_id}:
    get:
      tags:
        - Authentication
      summary: Get user information by ID
      description: Returns the user information for a given user ID
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve information for
          required: true
          type: string
      responses:
        200:
          description: User information retrieved successfully
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  email:
                    type: string
                    description: Email address of the user
                  id:
                    type: string
                    description: ID of the user in the database
                  firstname:
                    type: string
                    description: First name of the user
                  lastname:
                    type: string
                    description: Last name of the user
                  phone_number:
                    type: string
                    description: Phone number of the user
                  balance:
                    type: number
                    description: Account balance of the user
        404:
          description: User not found in the database
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message indicating that the user was not found in the database
  /api/auth/{user_id}/update:
    put:
      tags:
        - Authentication
      summary: Update user information
      description: Updates the information for a specific user.
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to update.
          required: true
          type: string
        - in: body
          name: user
          description: The fields to update for the user.
          required: true
          schema:
            type: object
            properties:
              firstname:
                type: string
                description: The user's first name.
              lastname:
                type: string
                description: The user's last name.
              password:
                type: string
                description: The user's password.
              cds_number:
                type: string
                description: The user's CDS number.
              id_number:
                type: string
                description: The user's ID number.
              phone_number:
                type: string
                description: The user's phone number.
      responses:
        200:
          description: User updated successfully.
        400:
          description: Missing user details or invalid field provided.
        404:
          description: User not found.
  /api/products/companies:
    get:
      summary: Get a list of companies
      operationId: getCompanyList
      responses:
        200:
          description: A list of companies and their information
          schema:
            type: object
            properties:
              companies:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier for the company
                    symbol:
                      type: string
                      description: The stock ticker symbol for the company
                    name:
                      type: string
                      description: The name of the company
                    price:
                      type: number
                      description: The current price of the stock
                    priceChange:
                      type: number
                      description: The change in price since the previous day
                    high:
                      type: number
                      description: The highest price of the stock for the day
                    low:
                      type: number
                      description: The lowest price of the stock for the day
                    prevPrice:
                      type: number
                      description: The price of the stock at the end of the previous day
                    volume:
                      type: number
                      description: The total volume of shares traded for the day
                    growth:
                      type: array
                      description: The percentage change in price over the last 7 days
                      items:
                        type: number
      tags:
        - Companies
  /api/products/companies/{symbol}:
    get:
      summary: Get information about a specific company.
      parameters:
        - in: path
          name: symbol
          required: true
          description: The symbol of the company to get information about.
          type: string
      responses:
        200:
          description: The information about the specified company.
          schema:
            type: object
            properties:
              company:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique ID of the company.
                  symbol:
                    type: string
                    description: The symbol of the company.
                  name:
                    type: string
                    description: The name of the company.
                  price:
                    type: number
                    description: The current price of the company's stock.
                  priceChange:
                    type: number
                    description: The change in the company's stock price since the previous day.
                  high:
                    type: number
                    description: The highest price the company's stock has reached in the current trading day.
                  low:
                    type: number
                    description: The lowest price the company's stock has reached in the current trading day.
                  prevPrice:
                    type: number
                    description: The previous closing price of the company's stock.
                  volume:
                    type: number
                    description: The trading volume of the company's stock.
                  growth:
                    type: array
                    description: The historical growth of the company's stock.
                    items:
                      type: number
        404:
          description: Company not found.
          schema:
            type: object
            properties:
              message:
                type: string
                description: The error message indicating that the company was not found.
      tags:
        - Companies
  /api/products/companies/trending:
    get:
      summary: A handler that receives a GET request and may or may not return a list of trending companies.
      description: Returns the top 10 companies that have had a price change of at least 10%.
      tags:
        - Companies
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              companies:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    symbol:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
                    priceChange:
                      type: number
                    high:
                      type: number
                    low:
                      type: number
                    prevPrice:
                      type: number
                    volume:
                      type: number
                    growth:
                      type: array
                      items:
                        type: object
        404:
          description: Not found.
  /api/products/companies/create:
    post:
      tags:
        - Companies
      summary: Create a new company in the database
      parameters:
        - in: body
          name: company_info
          description: JSON object containing information about the company to be created
          required: true
          schema:
            type: object
            properties:
              symbol:
                type: string
                description: The symbol for the company
              name:
                type: string
                description: The name of the company
              price:
                type: number
                description: The price of the company's stock
              description:
                type: string
                description: A description of the company
      responses:
        200:
          description: Company created successfully
          schema:
            type: object
            properties:
              id:
                type: integer
                description: The ID of the newly created company
        400:
          description: Invalid company information
  /api/products/companies/update:
    put:
      tags:
        - Companies
      summary: Update an existing company in the database
      parameters:
        - in: body
          name: company_info
          description: JSON object containing information about the company to be updated
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                description: The ID of the company to be updated
              symbol:
                type: string
                description: The new symbol for the company
              name:
                type: string
                description: The new name of the company
              price:
                type: number
                description: The new price of the company's stock
              description:
                type: string
                description: A new description of the company
      responses:
        200:
          description: Company updated successfully
        400:
          description: Invalid company information or ID not found

  /api/users/{user_id}/inbox:
    get:
      tags:
        - Users
      summary: Get a list of conversations for the authenticated user
      parameters:
        - in: path
          name: user_id
          description: ID of the user
          required: true
          type: string
      responses:
        200:
          description: List of conversations retrieved successfully
          schema:
            type: object
            properties:
              conversations:
                type: array
                description: List of conversations for the authenticated user
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the conversation
                    participants:
                      type: array
                      description: The participants in the conversation
                      items:
                        type: string
                    last_message:
                      type: string
                      description: The last message in the conversation
                    last_message_read:
                      type: boolean
                      description: Indicates whether the last message has been read
                    last_updated_time:
                      type: string
                      format: date-time
                      description: The timestamp of when the conversation was last updated
                    # add any other relevant information about the conversation here
        401:
          description: Unauthorized access
        404:
          description: User not found
  /api/users/{user_id}/portfolio:
    get:
      tags:
        - Users
      summary: Get the portfolio details of a user
      parameters:
        - in: path
          name: user_id
          description: ID of the user
          required: true
          type: string
      responses:
        200:
          description: Portfolio details retrieved successfully
          schema:
            type: object
            properties:
              portfolio:
                type: object
                properties:
                  user_id:
                    type: string
                    description: ID of the user
                  total_value:
                    type: number
                    description: Total value of the user's portfolio
                  balance:
                    type: number
                    description: User's account balance
                  change_in_value:
                    type: number
                    description: Change in value of the user's portfolio
                  percentage_change_in_value:
                    type: number
                    description: Percentage change in value of the user's portfolio
                  portfolio_value:
                    type: object
                    properties:
                      today:
                        type: number
                        description: Portfolio value for today
                      last_week:
                        type: number
                        description: Portfolio value for last week
                      last_month:
                        type: number
                        description: Portfolio value for last month
                      last_year:
                        type: number
                        description: Portfolio value for last year
                  stocks_owned:
                    type: array
                    description: List of stocks owned by the user
                    items:
                      type: object
                      properties:
                        symbol:
                          type: string
                          description: Stock symbol
                        name:
                          type: string
                          description: Stock name
                        shares:
                          type: number
                          description: Number of shares owned
                        purchase_price:
                          type: number
                          description: Price at which the stock was purchased
                        current_price:
                          type: number
                          description: Current price of the stock
                        current_value:
                          type: number
                          description: Current value of the shares owned
        404:
          description: User or portfolio not found
  /api/users/{user_id}/stocks:
    get:
      tags:
        - Users
      summary: Retrieve a list of stocks owned by a user
      description: |
        This endpoint retrieves a list of stocks owned by a user along with their current market value.
      parameters:
        - in: path
          name: user_id
          required: true
          type: string
          description: The ID of the user to retrieve the stocks for.
      responses:
        "200":
          description: A list of stocks owned by the user
          schema:
            type: object
            properties:
              stocks:
                type: array
                items:
                  type: object
                  properties:
                    symbol:
                      type: string
                      description: The stock symbol
                    shares:
                      type: integer
                      description: The number of shares owned
                    purchase_date:
                      type: string
                      description: The date the stock was purchased
                    purchase_price:
                      type: number
                      format: float
                      description: The purchase price of the stock
                    current_price:
                      type: number
                      format: float
                      description: The current price of the stock
                    current_value:
                      type: number
                      format: float
                      description: The current market value of the stock
        "404":
          description: The specified user was not found.
  /api/users/{user_id}/transactions:
    get:
      tags:
        - Users
      summary: Retrieve transactions for a user
      description: Retrieve a list of transactions associated with a particular user.
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The unique ID of the user
      responses:
        "200":
          description: A list of transactions associated with the user
          schema:
            type: array
            items:
              type: object
              properties:
                transaction_type:
                  type: string
                  description: The type of the transaction (e.g., "buy", "sell")
                stock_symbol:
                  type: string
                  description: The symbol of the stock associated with the transaction
                status:
                  type: string
                  description: The status of the transaction (e.g., "pending", "complete")
                time:
                  type: string
                  format: date-time
                  description: The time the transaction occurred in ISO 8601 format
        "404":
          description: The user with the specified ID was not found
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error
  /api/news:
    get:
      tags:
        - News
      summary: List news articles
      description: Returns a list of the latest news articles.
      responses:
        200:
          description: A list of news articles
          schema:
            type: object
            properties:
              articles:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      description: The title of the article
                    description:
                      type: string
                      description: A brief description of the article
                    url:
                      type: string
                      description: The URL of the article
                    source:
                      type: string
                      description: The source of the article
        500:
          description: An error occurred while processing the request
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error that occurred.
  /api/news/{article_id}:
    get:
      tags:
        - News
      summary: Get article information
      description: Returns information about an article with the specified ID
      parameters:
        - name: article_id
          in: path
          description: ID of the article to retrieve
          required: true
          type: string
      responses:
        200:
          description: Article information
          schema:
            type: object
            properties:
              article:
                type: object
                description: Information about the article
                properties:
                  _id:
                    type: string
                    description: Unique identifier for the article
                  title:
                    type: string
                    description: Title of the article
                  author:
                    type: string
                    description: Author of the article
                  content:
                    type: string
                    description: Content of the article
                  date:
                    type: string
                    description: Date the article was published
        404:
          description: Article not found
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message explaining that the article was not found
  /api/news/trending:
    get:
      tags:
        - News
      summary: Get the top 10 trending articles
      description: Returns a list of articles with more than 1000 reads, sorted by the number of reads in descending order.
      responses:
        "200":
          description: A list of the top 10 trending articles
          schema:
            type: object
            properties:
              message:
                type: string
                example: Top 10 trending articles
              articles:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The unique identifier for the article
                    title:
                      type: string
                      description: The title of the article
                    author:
                      type: string
                      description: The author of the article
                    content:
                      type: string
                      description: The content of the article
                    num_reads:
                      type: integer
                      description: The number of reads for the article
                      example: 2000
                  required:
                    - _id
                    - title
                    - author
                    - content
                    - num_reads